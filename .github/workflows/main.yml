name: Build and release

on: push

jobs:
  build:
    name: Build for Windows
    runs-on: windows-latest

    steps:
    - uses: microsoft/setup-msbuild@v1.0.0

    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Build debug executable
      run: |
        cmake . -G "Visual Studio 16 2019" -A Win32 -DCMAKE_SH="CMAKE_SH-NOTFOUND" -DCMAKE_BUILD_TYPE="Debug"
        msbuild.exe maniac.vcxproj -p:Configuration=Debug
        mv Debug\maniac.exe maniac-dbg.exe

    - name: Build release executable
      run: |
        cmake . -G "Visual Studio 16 2019" -A Win32 -DCMAKE_SH="CMAKE_SH-NOTFOUND" -DCMAKE_BUILD_TYPE="Release"
        msbuild.exe maniac.vcxproj -p:Configuration=Release
        mv Release\maniac.exe maniac-prd.exe

    - name: Create and populate builds folder
      run: |
        mkdir builds
        mv maniac-dbg.exe builds
        mv maniac-prd.exe builds

    - name: Upload builds folder as artifact
      uses: actions/upload-artifact@v1
      with:
        name: builds
        path: builds

  release:
    name: Create release and upload builds
    runs-on: ubuntu-latest

    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Download builds artifact
      uses: actions/download-artifact@v1
      with:
        name: builds

    - name: Create release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true

    - name: Get the latest version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash

    - name: Upload Windows release build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: builds/maniac-prd.exe
        asset_name: maniac-${{ steps.get_version.outputs.VERSION }}.exe
        asset_content_type: application/octet-stream

    - name: Upload Windows debug build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: builds/maniac-dbg.exe
        asset_name: maniac-${{ steps.get_version.outputs.VERSION }}-debug.exe
        asset_content_type: application/octet-stream
